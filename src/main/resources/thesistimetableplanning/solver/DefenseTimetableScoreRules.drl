//created on: 14-Apr-2019
package thesistimetableplanning.solver;
	dialect "java"

//list any import classes here.
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import thesistimetableplanning.domain.Defense;
import thesistimetableplanning.domain.Timeslot;



global HardSoftScoreHolder scoreHolder;
/*
rule "Defense timeslots grouped by common session and have no holes between them"
	when
		$timeslot1 : Timeslot($timeslotId1 : id,
							$session1 : session)
		$timeslot2 : Timeslot($timeslotId2 : id,
					id > $timeslotId1,
					session == $session1)
		$timeslot3 : Timeslot($timeslotId3 : id,
					id > $timeslotId2,
					session == $session1)
		$defense1 : Defense($defenseId1 : id,
					timeslot == $timeslot1)
		$defense2 : Defense($defenseId2 : id,
					id != $defenseId1,
					timeslot != $timeslot2)
		$defense3 : Defense(id != $defenseId1,
					id != $defenseId2,
					timeslot == $timeslot3)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
*/

rule "Defense timeslots grouped by common session and have no holes between them"
	when
		$timeslot1 : Timeslot($timeslotId1 : id,
							$session1 : session)
		$timeslot2 : Timeslot($timeslotId2 : id,
					id > $timeslotId1,
					session == $session1)
		$defense1 : Defense($defenseId1 : id,
					timeslot != $timeslot1)
		$defense2 : Defense(id != $defenseId1,
					timeslot == $timeslot2)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

rule "Commission member does not swap with a new member in the same session"
	when
		$defense1 : Defense(timeslot != null,
					$id1 : id)
		$defense2 : Defense(timeslot != null,
					!hasSameCommiteeOnSameSession($defense1),
					id != $id1)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
/*
rule "Commission member does not swap with a new member on the same day"
	when
	//	$defense1 : Defense(timeslot != null,
	//				$id1 : id)
	//	$defense2 : Defense(timeslot != null,
	//				!hasSameCommiteeOnSameDate($defense1),
	//				id > $id1)
	then
	//	scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
*/
/*
// Pole vaja seda kitsendust, kuna kood teeb kindlaks, et komisjonis on täpselt nii palju liikmeid, kui on vaja.
rule "Commission at least three members"
    when
    then
end
*/
/*
rule "Commission at least three members"

    when
        $defense : Defense(setCommission3(),
        			!enoughCommiteeMembers())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

rule "Defense timeslot only for single author"
	when
		$defense1 : Defense(timeslot != null,
					$timeslot : timeslot,
					$id1 : id)
		$defense2 : Defense(timeslot != null,
					overlapsTimeslot($defense1),
					$timeslot == timeslot,
					$id1 != id)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
//		$defense1.addNotUniqueTimeslotConstraint($timeslot, $defense1, $defense2);
//		$defense2.addNotUniqueTimeslotConstraint($timeslot, $defense1, $defense2);
end


/*
rule "Author prerequisites done"
    when
    //    $defense : Defense(!authorHasPreconditionsDone())
    then
    //    scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/
rule "Defense not on authors unavailable timeslot"
	when
		$defense : Defense(isAuthorsUnavailableTimeslot(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
		$defense.addAuthorUnavailableConstraint($timeslot);
end

rule "Defense not on authors unavailable timeslot tag"
	when
		$defense : Defense(isAuthorsUnavailableTimeslotTag(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
		$defense.addAuthorUnavailableTagConstraint($timeslot);
end
/*
rule "Closed defenses at start or end day or at before or after lunch"
    when
//       	$defense : Defense(!isClosedDefenseTimeslot(),
//        			!happensOnClosedTimes())
    then
//        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
*/
rule "Defense not on commission members unavailable timeslot"
	when
		$defense : Defense($count : isCommissionMembersUnavailableTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addHardConstraintMatch(kcontext, $count * -1);
		$defense.addCommissionUnavailableConstraint($timeslot);
end

rule "Defense not on commission members unavailable timeslot tag"
	when
		$defense : Defense($count : isCommissionMembersUnavailableTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addHardConstraintMatch(kcontext, $count * -1);
		$defense.addCommissionUnavailableTagConstraint($timeslot);
end
/*
rule "Defense grouped by same thesis theme"
    //include attributes such as "salience" here...
    //
    //	Kas siin punktide ära võtmise asemel annab + punkte juurde?
    //
    when
        //conditions
 //       $defense1 : Defense(timeslot != null,
 //       			$ThesisTheme : ThesisTheme,
 //       			$id1 : id)
 //       $defense2 : Defense(timeslot != null,
 //       			ThesisTheme == $ThesisTheme,
 //       			id > $id1)
    then
        //actions
  //      scoreHolder.addSoftConstraintMatch(kcontext, 1);
        //scoreHolder.penalize(kcontext, $defense2.sameThesisTypeTagCount($defense1);
end
*/
/*
// Pole vaja, kuna kood kindlustab, et kaitsmisel on üks esimees.
rule "Defense has one chairman"
    when
//        $defense : Defense(!hasChairmanAmongCommitee())
    then
//        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/
rule "Defense not on authors not preferred timeslot"
	when
		$defense : Defense(isAuthorsNotPreferredTimeslot(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
		$defense.addAuthorNotPreferredConstraint($timeslot);
end

rule "Defense not on authors not preferred timeslot tag"
	when
		$defense : Defense(isAuthorsNotPreferredTimeslotTag(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
		$defense.addAuthorNotPreferredTagConstraint($timeslot);
end

rule "Defense on authors preferred timeslot"
	when
		$defense : Defense(isAuthorsPreferredTimeslot(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, 1);
		$defense.addAuthorPreferredConstraint($timeslot);
end

rule "Defense on authors preferred timeslot tag"
	when
		$defense : Defense(isAuthorsPreferredTimeslotTag(),
					$timeslot : timeslot,
					timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, 1);
		$defense.addAuthorPreferredTagConstraint($timeslot);
end

rule "Defense not on authors supervisors not preferred timeslot"
	when
		$defense : Defense($count : isAuthorsSupervisorsNotPreferredTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addSupervisorNotPreferredConstraint($timeslot);
end

rule "Defense not on authors supervisors not preferred timeslot tag"
	when
		$defense : Defense($count : isAuthorsSupervisorsNotPreferredTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addSupervisorNotPreferredTagConstraint($timeslot);
end

rule "Defense on authors supervisors preferred timeslot"
	when
		$defense : Defense($count : isAuthorsSupervisorsPreferredTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count);
		$defense.addSupervisorPreferredConstraint($timeslot);
end

rule "Defense on authors supervisors preferred timeslot tag"
	when
		$defense : Defense($count : isAuthorsSupervisorsPreferredTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count);
		$defense.addSupervisorPreferredTagConstraint($timeslot);
end

rule "Defense not on authors supervisors unavailable timeslot"
	when
		$defense : Defense($count : isAuthorsSupervisorsUnavailableTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addSupervisorUnavailableConstraint($timeslot);
end

rule "Defense not on authors supervisors unavailable timeslot tag"
	when
		$defense : Defense($count : isAuthorsSupervisorsUnavailableTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addSupervisorUnavailableTagConstraint($timeslot);
end

rule "Defense not on commission members not preferred timeslot"
	when
		$defense : Defense($count : isCommissionMembersNotPreferredTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addCommissionNotPreferredConstraint($timeslot);
end

rule "Defense not on commission members not preferred timeslot tag"
	when
		$defense : Defense($count : isCommissionMembersNotPreferredTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count * -1);
		$defense.addCommissionNotPreferredTagConstraint($timeslot);
end

rule "Defense on commission members preferred timeslot"
	when
		$defense : Defense($count : isCommissionMembersPreferredTimeslot() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count);
		$defense.addCommissionPreferredConstraint($timeslot);
end

rule "Defense on commission members preferred timeslot tag"
	when
		$defense : Defense($count : isCommissionMembersPreferredTimeslotTag() > 0,
							$timeslot : timeslot,
							timeslot != null)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, $count);
		$defense.addCommissionPreferredTagConstraint($timeslot);
end

rule "Defense authors grouped by common supervisor"
    when
        $defense1 : Defense(timeslot != null,
        				$defenseId1 : id)
        $defense2 : Defense(timeslot != null,
       					hasSameSupervisorOnSameSession($defense1),
        				id != $defenseId1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1);
end